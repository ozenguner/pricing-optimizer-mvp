generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  folders      Folder[]
  rateCards    RateCard[]
  securityLogs SecurityLog[]
  
  // Performance indexes for common queries
  @@index([createdAt])
  @@index([email, createdAt])
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User       @relation(fields: [userId], references: [id])
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]   @relation("FolderHierarchy")
  rateCards RateCard[]
  
  // Performance indexes for folder operations
  @@index([userId])
  @@index([userId, parentId])
  @@index([parentId])
  @@index([userId, name])
  @@index([userId, createdAt])
}

model RateCard {
  id           String   @id @default(uuid())
  name         String
  description  String?
  pricingModel String   // 'tiered' | 'seat-based' | 'flat-rate' | 'cost-plus' | 'subscription'
  data         String   // Flexible JSON for different pricing structures
  isActive     Boolean  @default(true)
  shareToken   String?  @unique // For external sharing
  folderId     String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user   User    @relation(fields: [userId], references: [id])
  folder Folder? @relation(fields: [folderId], references: [id])
  
  // Performance indexes for rate card queries
  @@index([userId])
  @@index([userId, isActive])
  @@index([userId, folderId])
  @@index([folderId])
  @@index([shareToken])
  @@index([userId, updatedAt])
  @@index([userId, name])
  @@index([userId, pricingModel])
  @@index([isActive, createdAt])
}

model SecurityLog {
  id          String   @id @default(uuid())
  eventType   String   // SecurityEventType enum values
  userId      String?
  email       String?
  ipAddress   String
  userAgent   String
  details     String?  // JSON string for additional event details
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([eventType])
  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
  @@index([eventType, timestamp])
}

