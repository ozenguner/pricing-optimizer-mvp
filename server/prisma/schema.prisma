generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  name         String
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  lastLoginAt  DateTime?
  loginAttempts Int      @default(0)
  lockedUntil  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  folders           Folder[]
  rateCards         RateCard[]
  securityLogs      SecurityLog[]
  verificationTokens VerificationToken[]
  
  // Performance indexes for common queries
  @@index([createdAt])
  @@index([email, createdAt])
  @@index([verified])
  @@index([lockedUntil])
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User       @relation(fields: [userId], references: [id])
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]   @relation("FolderHierarchy")
  rateCards RateCard[]
  
  // Performance indexes for folder operations
  @@index([userId])
  @@index([userId, parentId])
  @@index([parentId])
  @@index([userId, name])
  @@index([userId, createdAt])
}

model Account {
  id            String         @id @default(uuid())
  name          String
  createdAt     DateTime       @default(now())
  productSuites ProductSuite[]
}

model ProductSuite {
  id        String   @id @default(uuid())
  name      String
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  skus      SKU[]
  createdAt DateTime @default(now())
}

model SKU {
  id             String       @id @default(uuid())
  code           String       @unique
  name           String
  productSuiteId String
  productSuite   ProductSuite @relation(fields: [productSuiteId], references: [id])
  rateCards      RateCard[]
  createdAt      DateTime     @default(now())
}

model RateCard {
  id           String   @id @default(uuid())
  name         String
  description  String?
  currency     String   @default("USD") // USD, EUR, GBP, CAD, JPY
  ownerTeam    String   @default("Pricing") // Marketing, Sales, Pricing, Finance
  pricingModel String   // 'tiered' | 'seat-based' | 'flat-rate' | 'cost-plus' | 'subscription'
  data         String   // Flexible JSON for different pricing structures
  isActive     Boolean  @default(true)
  shareToken   String?  @unique // For external sharing
  skuId        String?  // Optional for backward compatibility
  folderId     String?  // Kept for backward compatibility
  userId       String?  // Kept for backward compatibility, made optional
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // New calculation fields
  calculationData String?      // Stores the table data as JSON string
  isCalculationComplete Boolean @default(false)
  calculatedTotalPrice Float?
  priceValidFrom DateTime?
  priceValidUntil DateTime?
  
  sku    SKU?    @relation(fields: [skuId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
  folder Folder? @relation(fields: [folderId], references: [id])
  calculationAudits CalculationAudit[]
  
  // Performance indexes for rate card queries
  @@index([userId])
  @@index([userId, isActive])
  @@index([userId, folderId])
  @@index([folderId])
  @@index([shareToken])
  @@index([userId, updatedAt])
  @@index([userId, name])
  @@index([userId, pricingModel])
  @@index([userId, currency])
  @@index([isActive, createdAt])
  @@index([skuId])
  @@index([ownerTeam])
  @@index([isCalculationComplete])
}

model SecurityLog {
  id          String   @id @default(uuid())
  eventType   String   // SecurityEventType enum values
  userId      String?
  email       String?
  ipAddress   String
  userAgent   String
  details     String?  // JSON string for additional event details
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([eventType])
  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
  @@index([eventType, timestamp])
}

model VerificationToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  type      String    // 'email_verification' | 'password_reset'
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

model CalculationAudit {
  id         String @id @default(uuid())
  rateCardId String
  changeType String // 'cell_edit', 'row_add', 'row_delete', 'formula_change'
  oldValue   String?  // JSON string
  newValue   String   // JSON string
  changedBy  String
  changedAt  DateTime @default(now())
  
  rateCard RateCard @relation(fields: [rateCardId], references: [id])
  
  @@index([rateCardId])
  @@index([changedAt])
  @@index([changeType])
}

